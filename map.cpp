#include "map.h"
#include "functions.h"
#include "game.h"

//----------------------konstruktor i inicjalizacja mapy------------------------
GameMap::GameMap(Game *game) : game(game), playerX(3), playerY(8) {
  std::cout << "[DEBUG] konstruktir gamemap wywołane\n";
  grid = {
  
      {'T', '~', '~', '~', '~', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T',
       'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T'},
      {'.', '.', '~', '~', '~', 'T', 'T', '.', '.', '.', '.', '.', '.', '.',
       '.', '.', '.', '.', '.', '.', 'T', 'T', '.', '.', '.', '.', '.'},
      {'.', '.', '.', '~', '~', '#', '#', 'T', '.', '.', '.', '.', '.', '.',
       '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
      {'.', '.', '.', '.', '~', '~', '#', 'T', '.', '.', '.', '.', '.', '.',
       '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
      {'.', '.', '.', '.', '~', '~', '#', '#', '.', '.', '.', '.', '.', '.',
       '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
      {'.', '.', '.', '.', '.', '~', '~', '~', '.', '.', '.', '.', 'E', '.',
       '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
      {'.', '.', '.', '.', '.', '.', '.', '~', '.', '.', '.', '.', '.', '.',
       '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
      {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '~', '~', '~', '~',
       '~', '~', '~', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
      {'.', '.', '.', '.', '.', '.', '.', '.', '.', '~', '~', '~', '~', '~',
       '~', '~', '~', '~', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
      {'.', '.', '.', '.', '.', '.', '.', '.', '~', '~', '~', '~', '~', '~',
       '~', '~', '~', '~', '~', '.', '.', '.', '.', '.', '.', '.', '.'},
      {'.', '.', '.', '.', '.', '.', '.', '.', '.', '~', '~', '~', '~', '~',
       '~', '~', '~', '~', '~', '~', '~', '.', '.', '.', '.', '.', '.'},
      {'.', '.', '.', '.', 'E', '.', '.', '.', '.', '.', '.', '.', '.', '.',
       '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
      {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',
       '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
      {'.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.',
       '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
      {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',
       '.', '.', '*', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
      {'.', '.', '.', '.', '.', '.', '.', '.', 'T', '.', '.', '.', '.', 'E',
       '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
      {'.', '.', '.', '.', '.', '.', '.', 'T', 'T', '.', '.', '.', '.', '.',
       '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.'},
      {'.', '.', '.', '.', '.', 'T', 'T', 'T', 'T', '.', '.', '.', '.', '.',
       '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.'},
  };
  grid[playerY][playerX] = 'P';
  flagEnemyStatus=true; 
} 
/*
GameMap::GameMap(Game *game) : game(game), playerX(2), playerY(1){
  grid = {
      {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
      {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'}, 
      {'#', '.', '.', '.', '.', '~', '~', '.', '.', '.', '.', 'o', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
      {'#', '.', '.', '.', '~', '~', '~', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
      {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
      {'#', '.', '.', '.', '.', '.', '.', '.', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'}, 
      {'#', '.', '.', '.', '.', '.', '.', '.', 'g', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
      {'#', '.', '.', '.', '.', '.', '.', '.', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
      {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
      {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '!', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'}, 
      {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
      {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
      {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
      {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
      {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
      {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
      {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
      {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
  };
  grid[playerY][playerX] = 'P';
  flagEnemyStatus = true; */


//wyswietlanie mapy
void GameMap::displayMap() {
  std::cout << "[DEBUG] displayMap() wywołane\n";
  for (const auto &row : grid) {
    for (char c : row) {
      switch (c) {
      case 'P':
        std::cout << "\e[1;32m" << c << " \033[0m"; // Jasnozielony - gracz
        break;
      case 'E':
        std::cout << "\033[1;31m" << c << " \033[0m"; // Czerwony - wróg
        break;
        case '*':
        std::cout << "\e[1;35m" << c << " \033[0m"; // Czerwony - wróg
        break;
      case 'T':
        std::cout << "\033[32m" << c << " \033[0m"; // Zielony - drzewa
        break;
      case '#':
        std::cout << "\033[33m" << c << " \033[0m"; // Żółty - krzaki
        break;
      case '~':
        std::cout << "\033[34m" << c << " \033[0m"; // Niebieski - woda
        break;
      case '.':
        std::cout << "\033[0m" << c << " "; // Domyślny kolor - trawa
        break;
      default:
        std::cout << c << ' '; // Pozostałe znaki bez koloru
        break;
      }
    }
    std::cout << '\n';
  }
}
// poruszanie sie gracza
void GameMap::movePlayer(char direction) {
  int newX = playerX;
  int newY = playerY;

  switch (direction) {
  case 'w':
    newY--;
    break;
  case 's':
    newY++;
    break;
  case 'a':
    newX--;
    break;
  case 'd':
    newX++;
    break;
  default:
    return;
  }

  if (newY < 0 || newY >= grid.size() || newX < 0 || newX >= grid[0].size()) {
    std::cout << "\033[1;33mOut of bounds!\033[0m\n";
    sleep(600);
    return;
  }
  char targetTile = grid[newY][newX];
  if (targetTile == 'T' || targetTile == '#' || targetTile == '~') {
    std::cout << "\033[1;31mYou can't walk there!\033[0m\n";
    sleep(800);
    return;
  }

  // Wydarzenia
  if (targetTile == 'E') {
    game->event("combat");
    
    if (game->getEnemies().empty() && !flagEnemyStatus) {
      grid[newY][newX] = '.'; // usunięcie wroga
      setTrueEnemyStatus();
    } 
    else if(flagEnemyStatus) {
      grid[newY][newX] = 'E';
      return; // jeśli wróg przeżył, nie poruszaj się
    }
    
    
  } else if (targetTile == '*') {
    game->event("treasure");
    grid[newY][newX] = '.'; // usunięcie skarbu
  }

  // Przeniesienie gracza
  grid[playerY][playerX] = '.'; // stara pozycja
  playerX = newX;
  playerY = newY;
  grid[playerY][playerX] = 'P'; // nowa pozycja
}
void GameMap::setFalseEnemyStatus() {
    flagEnemyStatus = false;
}
void GameMap::setTrueEnemyStatus() {
    flagEnemyStatus = true;
}
